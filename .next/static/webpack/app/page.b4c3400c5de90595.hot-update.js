"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/slotGenerator.ts":
/*!**********************************!*\
  !*** ./src/lib/slotGenerator.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterBookedSlots: () => (/* binding */ filterBookedSlots),\n/* harmony export */   filterPastSlots: () => (/* binding */ filterPastSlots),\n/* harmony export */   generateSlotsForDate: () => (/* binding */ generateSlotsForDate),\n/* harmony export */   generateSlotsFromOperatingHours: () => (/* binding */ generateSlotsFromOperatingHours)\n/* harmony export */ });\n/**\n * Generate time slots based on operating hours and booking duration\n */ function generateSlotsFromOperatingHours(operatingHours, globalSettings, weekday) {\n    const dayHours = operatingHours.find((h)=>h.weekday === weekday);\n    if (!dayHours || !dayHours.isActive || dayHours.timeIntervals.length === 0) {\n        return [];\n    }\n    const slots = [];\n    const durationMinutes = globalSettings.bookingDurationMinutes;\n    for (const interval of dayHours.timeIntervals){\n        const [openHour, openMinute] = interval.openTime.split(':').map(Number);\n        const [closeHour, closeMinute] = interval.closeTime.split(':').map(Number);\n        const openMinutes = openHour * 60 + openMinute;\n        const closeMinutes = closeHour * 60 + closeMinute;\n        // Generate slots within this interval\n        let currentMinutes = openMinutes;\n        while(currentMinutes + durationMinutes < closeMinutes){\n            const startHour = Math.floor(currentMinutes / 60);\n            const startMinute = currentMinutes % 60;\n            const endMinutes = currentMinutes + durationMinutes;\n            const endHour = Math.floor(endMinutes / 60);\n            const endMinute = endMinutes % 60;\n            const startTime = \"\".concat(startHour.toString().padStart(2, '0'), \":\").concat(startMinute.toString().padStart(2, '0'));\n            const endTime = \"\".concat(endHour.toString().padStart(2, '0'), \":\").concat(endMinute.toString().padStart(2, '0'));\n            slots.push(\"\".concat(startTime, \" - \").concat(endTime));\n            currentMinutes += durationMinutes;\n        }\n    }\n    return slots.sort((a, b)=>a.localeCompare(b, 'en', {\n            numeric: true\n        }));\n}\n/**\n * Generate slots for a specific date using operating hours\n */ async function generateSlotsForDate(date, service) {\n    try {\n        // console.log('üîç Generating slots for date:', date, 'service:', service);\n        // First try to get operating hours and global settings\n        const [hoursRes, settingsRes] = await Promise.all([\n            fetch('/api/operating-hours').catch(()=>({\n                    json: ()=>[]\n                })),\n            fetch('/api/global-settings').catch(()=>({\n                    json: ()=>null\n                }))\n        ]);\n        const operatingHours = await hoursRes.json();\n        const globalSettings = await settingsRes.json();\n        // console.log('üìä Operating hours:', operatingHours);\n        // console.log('‚öôÔ∏è Global settings:', globalSettings);\n        // If we have operating hours configured, use the new system\n        if (operatingHours.length > 0 && globalSettings && operatingHours.some((h)=>h.isActive && h.timeIntervals.length > 0)) {\n            // console.log('‚úÖ Using new operating hours system');\n            const weekday = new Date(date).getDay();\n            const baseSlots = generateSlotsFromOperatingHours(operatingHours, globalSettings, weekday);\n            // console.log('üéØ Generated base slots:', baseSlots);\n            // Check for date-specific overrides\n            try {\n                // console.log('üîç Checking for date overrides for date:', date);\n                const overridesRes = await fetch(\"/api/date-overrides?date=\".concat(date));\n                const overrides = await overridesRes.json();\n                // console.log('üìã Date overrides found:', overrides);\n                if (Array.isArray(overrides) && overrides.length > 0) {\n                    const availableOverrides = overrides.filter((o)=>o.available && (!service || !o.service || o.service === service)).map((o)=>o.time);\n                    // console.log('‚úÖ Available overrides:', availableOverrides);\n                    if (availableOverrides.length > 0) {\n                        return availableOverrides.sort((a, b)=>a.localeCompare(b, 'en', {\n                                numeric: true\n                            }));\n                    } else {\n                    // console.log('‚ö†Ô∏è No available overrides found, using base slots instead');\n                    }\n                } else {\n                // console.log('üìÖ No date overrides found, using base slots');\n                }\n            } catch (error) {\n            // console.warn('Could not fetch date overrides:', error);\n            }\n            // Check for blocked intervals\n            try {\n                // console.log('üîç Checking for blocked intervals for date:', date);\n                const blockedRes = await fetch(\"/api/blocked-intervals?date=\".concat(date));\n                const blockedIntervals = await blockedRes.json();\n                // console.log('üö´ Blocked intervals found:', blockedIntervals);\n                if (Array.isArray(blockedIntervals) && blockedIntervals.length > 0) {\n                    // Filter out slots that overlap with blocked intervals\n                    const filteredSlots = baseSlots.filter((slot)=>{\n                        const [slotStart, slotEnd] = slot.split(' - ');\n                        const slotStartMinutes = timeToMinutes(slotStart);\n                        const slotEndMinutes = timeToMinutes(slotEnd);\n                        const hasOverlap = blockedIntervals.some((interval)=>{\n                            const intervalStartMinutes = timeToMinutes(interval.startTime);\n                            const intervalEndMinutes = timeToMinutes(interval.endTime);\n                            const overlaps = slotStartMinutes < intervalEndMinutes && slotEndMinutes > intervalStartMinutes;\n                            if (overlaps) {\n                            // console.log(`üö´ Slot ${slot} overlaps with blocked interval ${interval.startTime}-${interval.endTime} (${interval.reason || 'No reason'})`);\n                            }\n                            return overlaps;\n                        });\n                        return !hasOverlap;\n                    });\n                    // console.log('‚úÖ Slots after blocked intervals filter:', filteredSlots);\n                    return filteredSlots;\n                } else {\n                // console.log('üìÖ No blocked intervals found, using base slots');\n                }\n            } catch (error) {\n            // console.warn('Could not fetch blocked intervals:', error);\n            }\n            // console.log('üéØ Returning baseSlots from new system:', baseSlots);\n            return baseSlots;\n        }\n        // Fallback to old system - use global timeslots\n        // console.log('üîÑ Falling back to old global timeslots system');\n        try {\n            const globalSlotsRes = await fetch('/api/global-timeslots');\n            const globalSlots = await globalSlotsRes.json();\n            // console.log('üìÖ Global slots from old system:', globalSlots);\n            if (Array.isArray(globalSlots) && globalSlots.length > 0) {\n                const weekday = new Date(date).getDay();\n                const slots = globalSlots.filter((s)=>Number(s.weekday) === Number(weekday)).map((s)=>s.time);\n                // Check for date-specific overrides\n                try {\n                    const overridesRes = await fetch(\"/api/date-overrides?date=\".concat(date));\n                    const overrides = await overridesRes.json();\n                    if (Array.isArray(overrides) && overrides.some((o)=>o.available)) {\n                        const available = overrides.filter((o)=>o.available).map((o)=>o.time);\n                        return available.sort((a, b)=>a.localeCompare(b, 'en', {\n                                numeric: true\n                            }));\n                    }\n                } catch (error) {\n                // console.warn('Could not fetch date overrides:', error);\n                }\n                return slots.sort((a, b)=>a.localeCompare(b, 'en', {\n                        numeric: true\n                    }));\n            }\n        } catch (error) {\n        // console.warn('Could not fetch global timeslots:', error);\n        }\n        // Final fallback - return empty array\n        // console.log('‚ùå No slots found for date:', date);\n        return [];\n    } catch (error) {\n        // console.error('‚ùå Error generating slots for date:', error);\n        return [];\n    }\n}\n/**\n * Filter out past slots if the date is today\n */ function filterPastSlots(slots, date) {\n    const today = new Date();\n    const selectedDate = new Date(date);\n    // console.log('üïê Filtering past slots. Date:', date, 'Today:', today.toISOString().split('T')[0]);\n    // If not today, return all slots\n    if (today.getFullYear() !== selectedDate.getFullYear() || today.getMonth() !== selectedDate.getMonth() || today.getDate() !== selectedDate.getDate()) {\n        // console.log('üìÖ Not today, returning all slots:', slots);\n        return slots;\n    }\n    // Filter out past slots\n    const nowMinutes = today.getHours() * 60 + today.getMinutes();\n    // console.log('‚è∞ Current time in minutes:', nowMinutes);\n    const filtered = slots.filter((slot)=>{\n        const [startTime] = slot.split(' - ');\n        const [hour, minute] = startTime.split(':').map(Number);\n        const slotMinutes = hour * 60 + minute;\n        const isPast = slotMinutes <= nowMinutes;\n        // console.log(`‚è∞ Slot ${slot} (${slotMinutes} min) - Past: ${isPast}`);\n        return !isPast;\n    });\n    // console.log('‚úÖ Past slots filtered:', filtered);\n    return filtered;\n}\n/**\n * Remove already booked slots (check for time overlap)\n */ function filterBookedSlots(slots, bookedSlots) {\n    // console.log('üîç Filtering booked slots. Available slots:', slots);\n    // console.log('üìÖ Booked slots:', bookedSlots);\n    const filtered = slots.filter((slot)=>{\n        const [slotStart, slotEnd] = slot.split(' - ');\n        const isBooked = bookedSlots.some((bookedTime)=>{\n            // Check if the booked time overlaps with this slot\n            // A booked time at 19:00 should block slots that start at 19:00 or later\n            // but also slots that end at 19:00 or later (like 18:15-19:00)\n            // Convert times to minutes for easier comparison\n            const slotStartMinutes = timeToMinutes(slotStart);\n            const slotEndMinutes = timeToMinutes(slotEnd);\n            const bookedMinutes = timeToMinutes(bookedTime);\n            // Check for overlap: slot overlaps if it starts before booked time ends\n            // and ends after booked time starts\n            // Since we don't know the duration of the booked slot, we assume it's 45 minutes\n            const bookedEndMinutes = bookedMinutes + 45; // Assume 45 min duration\n            const hasOverlap = slotStartMinutes < bookedEndMinutes && slotEndMinutes > bookedMinutes;\n            // console.log(`‚è∞ Slot ${slot} (${slotStartMinutes}-${slotEndMinutes} min) vs Booked ${bookedTime} (${bookedMinutes}-${bookedEndMinutes} min) - Overlap: ${hasOverlap}`);\n            return hasOverlap;\n        });\n        // console.log(`‚è∞ Slot ${slot} - Booked: ${isBooked}`);\n        return !isBooked;\n    });\n    // console.log('‚úÖ Filtered slots:', filtered);\n    return filtered;\n}\n/**\n * Convert time string (HH:MM) to minutes since midnight\n */ function timeToMinutes(time) {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/slotGenerator.ts\n"));

/***/ })

});